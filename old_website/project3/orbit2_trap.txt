%Program 6.4 Plotting program for two-body problem 
% Inputs: time interval inter, initial conditions
% ic = [x1 vx1 y1 vy1 x2 vx2 y2 vy2], x position, x velocity, y pos, y vel,
% number of steps n, steps per point plotted p
% Calls a one-step method such as trapstep.m
% Example usage: orbit2([0 100],[2 0.2 2 -0.2 0 -0.02 0 0.02],10000,5)

function z=orbit2_trap(inter,ic,n,p)

inter=[0 100];
ic=[2 0.2 2 -0.2 0 -0.02 0 0.02];
n=10000;
p=5;

%MakeQTMovie('start','orbit2.mov')
%MakeQTMovie('framerate', 250)
h=(inter(2)-inter(1))/n;        % plot n points 
% grab initial conditions (position and velocity)
x1=ic(1);vx1=ic(2);y1=ic(3);vy1=ic(4); % initial conditions for Mass 1
x2=ic(5);vx2=ic(6);y2=ic(7);vy2=ic(8); % initial conditions for Mass 2
y(1,:)=[x1 vx1 y1 vy1 x2 vx2 y2 vy2];t(1)=inter(1);    % build y vector
set(gca,'XLim',[-5 5],'YLim',[-5 5],'XTick',[-5 0 5],'YTick',...
  [-5 0 5],'Drawmode','fast','Visible','on');
cla;

head1=line('color','r','Marker','.','markersize',25,...
  'erase','xor','xdata',[],'ydata',[]);
head2=line('color','b','Marker','.','markersize',25,...
  'erase','xor','xdata',[],'ydata',[]);
tail1=line('color','w','LineStyle','-','erase','none',...
  'xdata',[],'ydata',[]);
tail2=line('color','w','LineStyle','-','erase','none',...
  'xdata',[],'ydata',[]);

for k=1:n/p
  for i=1:p
    t(i+1)=t(i)+h;
    y(i+1,:)=trapstep(t(i),y(i,:),h);
  end
  y(1,:)=y(p+1,:);t(1)=t(p+1);
  set(head1,'xdata',y(1,1),'ydata',y(1,3))
  set(head2,'xdata',y(1,5),'ydata',y(1,7))
  set(tail1,'xdata',y(2:p,1),'ydata',y(2:p,3))
  set(tail2,'xdata',y(2:p,5),'ydata',y(2:p,7))
  drawnow expose;
  %MakeQTMovie('addfigure')
end
%MakeQTMovie('finish')

function y=trapstep(t,x,h)
%one step of the Trapezoid Method
z1=ydot(t,x);
g=x+h*z1;
z2=ydot(t+h,g);
y=x+h*(z1+z2)/2;

function z = ydot(t,x)
m1=0.03;m2=0.3;g=1;mg1=m1*g;mg2=m2*g;
px1=x(1);py1=x(3);vx1=x(2);vy1=x(4);
px2=x(5);py2=x(7);vx2=x(6);vy2=x(8);
dist=sqrt((px2-px1)^2+(py2-py1)^2);
z=zeros(1,8);
z(1)=vx1;
z(2)=(mg2*(px2-px1))/(dist^3);
z(3)=vy1;
z(4)=(mg2*(py2-py1))/(dist^3);
z(5)=vx2;
z(6)=(mg1*(px1-px2))/(dist^3);
z(7)=vy2;
z(8)=(mg1*(py1-py2))/(dist^3);