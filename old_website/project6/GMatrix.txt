function GMatrix(q,n)
%This function considers Adjacency Matricies and 
%their associated jump probability.
%n=associated adj. matrix
%q=jump probability

%Defining 1-q and initial A
qp=1-q;
A=[];

%Defining the corresponding matricies

%Problem 1-3
if n == 1
    A= [0 1 0 0 0 0 0 0 1 0 0 0 0 0 0; %1
    0 0 1 0 1 0 1 0 0 0 0 0 0 0 0; %2
    0 1 0 0 0 1 0 1 0 0 0 0 0 0 0; %3
    0 0 1 0 0 0 0 0 0 0 0 1 0 0 0; %4
    1 0 0 0 0 0 0 0 0 1 0 0 0 0 0; %5
    0 0 0 0 0 0 0 0 0 1 1 0 0 0 0; %6
    0 0 0 0 0 0 0 0 0 1 1 0 0 0 0; %7
    0 0 0 1 0 0 0 0 0 0 1 0 0 0 0; %8
    0 0 0 0 1 1 0 0 0 1 0 0 0 0 0; %9
    0 0 0 0 0 0 0 0 0 0 0 0 1 0 0; %10
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 1; %11
    0 0 0 0 0 0 1 1 0 0 1 0 0 0 0; %12
    0 0 0 0 0 0 0 0 1 0 0 0 0 1 0; %13
    0 0 0 0 0 0 0 0 0 1 1 0 1 0 1; %14
    0 0 0 0 0 0 0 0 0 0 0 1 0 1 0;]; %15
   %1 2 3 4 5 6 7 8 9 ) ! @ # $ %

%Problem 4
%Using the A1 adj. matrix, but substituting
%A(2,7)=A(12,7)=2 as opposed to 1
elseif n == 2
    A= [0 1 0 0 0 0 0 0 1 0 0 0 0 0 0; %1
    0 0 1 0 1 0 2 0 0 0 0 0 0 0 0; %2
    0 1 0 0 0 1 0 1 0 0 0 0 0 0 0; %3
    0 0 1 0 0 0 0 0 0 0 0 1 0 0 0; %4
    1 0 0 0 0 0 0 0 0 1 0 0 0 0 0; %5
    0 0 0 0 0 0 0 0 0 1 1 0 0 0 0; %6
    0 0 0 0 0 0 0 0 0 1 1 0 0 0 0; %7
    0 0 0 1 0 0 0 0 0 0 1 0 0 0 0; %8
    0 0 0 0 1 1 0 0 0 1 0 0 0 0 0; %9
    0 0 0 0 0 0 0 0 0 0 0 0 1 0 0; %10
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 1; %11
    0 0 0 0 0 0 2 1 0 0 1 0 0 0 0; %12
    0 0 0 0 0 0 0 0 1 0 0 0 0 1 0; %13
    0 0 0 0 0 0 0 0 0 1 1 0 1 0 1; %14
    0 0 0 0 0 0 0 0 0 0 0 1 0 1 0;]; %15
   %1 2 3 4 5 6 7 8 9 ) ! @ # $ %

%Problem 5
%Removing the 10th row and 10 column from
%the initial adjacency matrix.
elseif n == 3
    A= [0 1 0 0 0 0 0 1 0 0 0 0 0 0; %1
    0 0 1 0 1 0 1 0 0 0 0 0 0 0; %2
    0 1 0 0 0 1 0 1 0 0 0 0 0 0; %3
    0 0 1 0 0 0 0 0 0 0 1 0 0 0; %4
    1 0 0 0 0 0 0 0 0 0 0 0 0 0; %5
    0 0 0 0 0 0 0 0 0 1 0 0 0 0; %6
    0 0 0 0 0 0 0 0 0 1 0 0 0 0; %7
    0 0 0 1 0 0 0 0 0 1 0 0 0 0; %8
    0 0 0 0 1 1 0 0 0 0 0 0 0 0; %9
    0 0 0 0 0 0 0 0 0 0 0 0 0 1; %11
    0 0 0 0 0 0 1 1 0 1 0 0 0 0; %12
    0 0 0 0 0 0 0 0 1 0 0 0 1 0; %13
    0 0 0 0 0 0 0 0 0 1 0 1 0 1; %14
    0 0 0 0 0 0 0 0 0 0 1 0 1 0;]; %15
   %1 2 3 4 5 6 7 8 9 ! @ # $ %
   %NOTE: This is now a 14x14 matrix.
   
%If any of the n's are not valid, 
%this will ask for correct numbers [1-3]
else
    fprintf('Choose either 1, 2 or 3 for the corresponding Adjacency Matrix')
    RETURN
end

%Defines Matrix dimensions
[rows, columns]=size(A);
%Defines sums of the columns
ni=sum(A');

%Initializes G
G=zeros(rows,columns);

%Creates G
for i=1:rows
    for j=1:columns
        G(i,j)=(q/rows)+qp*A(j,i)/ni(j);
    end
end



%Grabs eigen vectors 'v' and values 'e'
[v,e]=eig(G);
[Y,I]=sort(e,'descend'); %Sorts the values into I in descending order
p=real(v(:,I(1,1))); %Converts complex numbers into reals
p=p/sum(p); %Normalizes


%Checks to see if G is a stochastic Matrix
%(sums of the columns are 1)
stocheck=sum(G)

%Prints G
G;
%Prints p
p;

