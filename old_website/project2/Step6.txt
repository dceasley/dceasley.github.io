% Step 6
clear;
x0 = [0; 0; 6370; 0.0001];     %initial vector
c=299792.458;                  %speed of light in vacuum
e = (1.0 + sqrt(5.0)) / 2.0;    %Golden ratio
rho = 26576;
%rho = 42256;                   %uncomment for WAAS value
scale = rho/sqrt(1+e^2);       %Scale factor
 
%Top hemisphere of an icosahedron
A=scale*[-1 1 -1 1 0 0 e -e]; 
B=scale*[e e -e -e -1 1 0 0];
C= scale*[0 0 0 0 e e 1 1];
 
%Generate time transit values

for i =1:8
    R(i) = sqrt((A(i))^2+(B(i))^2 + (C(i)-6370)^2);
    t(i) = x0(4) + R(i)/c;
end

t0=t;
t1=t;
v0 =[0;0;6370];
 
%Generate signs    
mat1 = [1,1,1,1,1,1,1,1];
mat2 = unique(perms([-1,1,1,1,1,1,1,1]), 'rows');
mat3 = unique(perms([-1,-1,1,1,1,1,1,1]),'rows');
mat4 = unique(perms([-1,-1,-1,1,1,1,1,1]),'rows');
mat5 = unique(perms([-1,-1,-1,-1,1,1,1,1]),'rows');
mat6 = unique(perms([-1,-1,-1,-1,-1,1,1,1]),'rows');
mat7 = unique(perms([-1,-1,-1,-1,-1,-1,1,1]),'rows');
mat8 = unique(perms([-1,-1,-1,-1,-1,-1,-1,1]),'rows');
mat9 = [-1,-1,-1,-1,-1,-1,-1,-1];
signs = vertcat(mat1,mat2,mat3,mat4,mat5,mat6,mat7,mat8,mat9);
 
 
for j = 1:256
    t = t1 + ((10e-8)*signs(j,:));       %ERROR GENERATION
    
    for i=1:30
        %Find Jacobian
        D = [2*(x0(1) - A(1)), 2*(x0(2) - B(1)), 2*(x0(3) - C(1)), 2*c^2*(t(1) - x0(4));
            2*(x0(1) - A(2)), 2*(x0(2) - B(2)), 2*(x0(3) - C(2)), 2*c^2*(t(2) - x0(4));
            2*(x0(1) - A(3)), 2*(x0(2) - B(3)), 2*(x0(3) - C(3)), 2*c^2*(t(3) - x0(4));
            2*(x0(1)- A(4)), 2*(x0(2) - B(4)), 2*(x0(3) - C(4)), 2*c^2*(t(4) - x0(4));
            2*(x0(1)- A(5)), 2*(x0(2) - B(5)), 2*(x0(3) - C(5)), 2*c^2*(t(5) - x0(4));
            2*(x0(1)- A(6)), 2*(x0(2) - B(6)), 2*(x0(3) - C(6)), 2*c^2*(t(6) - x0(4));
            2*(x0(1)- A(7)), 2*(x0(2) - B(7)), 2*(x0(3) - C(7)), 2*c^2*(t(7) - x0(4));
            2*(x0(1)- A(8)), 2*(x0(2) - B(8)), 2*(x0(3) - C(8)), 2*c^2*(t(8) - x0(4))];
        
        %Define equations
        F = [(x0(1) - A(1))^2 + (x0(2) - B(1))^2 + (x0(3) - C(1))^2 - c^2*(t(1) - x0(4))^2;
            (x0(1) - A(2))^2 + (x0(2) - B(2))^2 + (x0(3) - C(2))^2 - c^2*(t(2) - x0(4))^2;
            (x0(1) - A(3))^2 + (x0(2) - B(3))^2 + (x0(3) - C(3))^2 - c^2*(t(3) - x0(4))^2;
            (x0(1) - A(4))^2 + (x0(2) - B(4))^2 + (x0(3) - C(4))^2 - c^2*(t(4) - x0(4))^2;
            (x0(1) - A(5))^2 + (x0(2) - B(5))^2 + (x0(3) - C(5))^2 - c^2*(t(5) - x0(4))^2;
            (x0(1) - A(6))^2 + (x0(2) - B(6))^2 + (x0(3) - C(6))^2 - c^2*(t(6) - x0(4))^2;
            (x0(1) - A(7))^2 + (x0(2) - B(7))^2 + (x0(3) - C(7))^2 - c^2*(t(7) - x0(4))^2;
            (x0(1) - A(8))^2 + (x0(2) - B(8))^2 + (x0(3) - C(8))^2 - c^2*(t(8) - x0(4))^2];
        
        %Gauss-Newton Method
        v = (D'*D)\( - D'*F);
        x0 = x0 + v;
    end
    %Find error magnification factor for each configuration
    FE(j) = norm(x0(1:3)-v0,inf);
    BE(j) = c*norm(t-t0,inf);
    EMF(j) = FE/BE;
end
 
fprintf('condition number = %f \n',max(EMF))
fprintf('Max distance error = %f meters.\n',max(FE)*1000)
